/**************************************  收获与积累  ************************************/

/*************************************  链接
    .程序的生命周期
        源文件 =>.i =>.s =>.o =>.out=>执行; 箭头处依次为:预处理、编译、汇编、链接、加载 
    .ELF文件(可执行可链接文件)
        可重定位目标文件(.o)、可执行目标文件(.out)、共享目标文件(.so)都是ELF格式(windows下对应为PE)
    .可重定位目标文件(.o)解析
        .ELF头：描述了文件类型、机器类型、字大小、字节顺序等基本信息
        .节(section)头部表:描述目标文件各节的基本信息
        .代码: .text,包含已经编译的机器码
        .数据: .data是初始化的数据 .bss是未初始化的数据
        .符号表: .symtab主要来自编译器的符号表,但是不包含局部变量(仅包含需要重定位的全局、外部变量)
        .重定位信息: .rel.text  .rel.data, 进行重定位需要修改
        .strtab:符号的字符串信息,符号表中没有指出符号的写法，需要在strtab中查找
        ..........
        使用readelf查看 .o文件！！
    .静态库
        静态库是可重定位目标文件(.o)的集合，称为存档文件(archive),常以.a命名
        静态库由多个汇编好的.o文件组成; 链接时需要指出静态库的位置,编译器只链接静态库中被应用程序引用的
            目标模块,它会被重定位到应用程序中,形成可执行目标文件
    .静态库与动态库的本质区别
        静态库被编译进目标程序内部,而动态库没有; 静态库链接成功后的文件可独立运行!!
    .动态库




        


/*************************************  网络编程
    .stdin、stdout、stderror
        linux下所有设备都被视为文件
        标准输入文件就是键盘,而不是磁盘上的文件，描述符为0
        标准输出文件就是显示器,而不是磁盘上的文件,描述符为1
        标准错误文件就是显示器,而不是磁盘上的文件,描述符为2
        (可在/dev/ 中找到各种外设)
    .socket
        socket:通信的一个端点,通常用(ip:port)表示套接字地址,但是这是IPv4的专用方式
        在操作系统的底层实现中,socket地址不是(ip:port)的表示方式!而是强制转换成协议无关地址
        socket也被视为文件,有对应的文件描述符,通信就是读写socket对应的文件(不是磁盘文件!)
    .telnet 
        telnet主要用于远程登录,但是不如ssh安全
        书中使用telnet ip port 实际上是通过telnet连接了web服务器,因而能发送http请求,并非登录!
    .http请求与响应
        通过实验可知,http请求与响应就是明文!向socket写入一段符合http协议的ASCII字符串,服务端http软件
            解析字符串并据此做出回应!
        http标准要求每一个文本行都是由一对回车和换行符结束

/*************************************  并发编程
    .并发模型
        进程:父子进程有独立的地址空间,创建子进程时会复制父进程的所有内容
        I/O多路复用：只有一个进程！当一个I/O事件到达时便执行相应程序。为防止一个I/O事件占用cpu过长时间，
            编程时注意使用细粒度！
        线程:可看做进程与I/O多路复用的结合。
    .同步与互斥(进程/线程)
        互斥:散步在不同进程之间的若干程序片断，当某个进程运行其中一个程序片段时，其它进程就不能运行它们之中
            的任一程序片段，只能等到该进程运行完这个程序片段后才可以运行。
        同步:散步在不同进程之间的若干程序片断，它们的运行必须严格按照规定的某种先后次序来运行，这种先后次序
            依赖于要完成的特定的任务
        关系:同步是一种更为复杂的互斥，而互斥是一种特殊的同步; 
            互斥的两个线程不能同时运行,但是互斥无法限制访问者对资源的访问顺序;
            而同步也是不能同时运行，但他是必须要安照某种次序来运行相应的线程（也是一种互斥）！
    .多核机器上的线程并行
        并行程序通常写为每个核上只运行一个线程。若线程数多于核数,一个核上多个线程切换的开销反而降低整体性能

    